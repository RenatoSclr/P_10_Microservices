// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientsAPI.Data;

#nullable disable

namespace PatientsAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250123122425_SeedPatientTestsData")]
    partial class SeedPatientTestsData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PatientsAPI.Domain.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreLabel = "Homme"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreLabel = "Femme"
                        });
                });

            modelBuilder.Entity("PatientsAPI.Domain.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("GenreId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = new Guid("ccc9e063-c800-43d5-924a-08dd2e6bc8f4"),
                            Adresse = "1 Brookside St",
                            DateDeNaissance = new DateTime(1966, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 2,
                            Nom = "TestNone",
                            NumeroTelephone = "100-222-3333",
                            Prenom = "Test"
                        },
                        new
                        {
                            PatientId = new Guid("157d6514-89de-431b-924b-08dd2e6bc8f4"),
                            Adresse = "2 High St",
                            DateDeNaissance = new DateTime(1945, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 1,
                            Nom = "TestBorderline",
                            NumeroTelephone = "200-333-4444",
                            Prenom = "Test"
                        },
                        new
                        {
                            PatientId = new Guid("415b6bbb-bd43-4d04-924c-08dd2e6bc8f4"),
                            Adresse = "3 Club Road",
                            DateDeNaissance = new DateTime(2004, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 1,
                            Nom = "TestInDanger",
                            NumeroTelephone = "300-444-5555",
                            Prenom = "Test"
                        },
                        new
                        {
                            PatientId = new Guid("94a687bd-5ad7-4596-924d-08dd2e6bc8f4"),
                            Adresse = "4 Valley Dr",
                            DateDeNaissance = new DateTime(2002, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 2,
                            Nom = "TestEarlyOnset",
                            NumeroTelephone = "400-555-6666",
                            Prenom = "Test"
                        });
                });

            modelBuilder.Entity("PatientsAPI.Domain.Patient", b =>
                {
                    b.HasOne("PatientsAPI.Domain.Genre", "Genre")
                        .WithMany("Patients")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PatientsAPI.Domain.Genre", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
